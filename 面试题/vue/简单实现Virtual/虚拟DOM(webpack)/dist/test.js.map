{"version":3,"sources":["webpack://test/./src/diff.js","webpack://test/./src/element.js","webpack://test/./src/patch.js","webpack://test/webpack/bootstrap","webpack://test/webpack/runtime/define property getters","webpack://test/webpack/runtime/hasOwnProperty shorthand","webpack://test/webpack/runtime/make namespace object","webpack://test/./src/test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iEAA2B;AACzC;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,cAAc,iEAA2B;AACzC;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,8DAAwB;AACtC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA,cAAc,oDAAc;AAC5B;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAiB;AAC7B,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,cAAc,4DAAsB;AACpC;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,YAAY,wDAAkB;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;AClHpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;ACrCvB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,4CAA4C;AAC5C,oCAAoC;AACpC,4BAA4B;AAC5B,sDAAsD;AACtD,gDAAgD;AAChD,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;UCnErB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;ACNgC;AACN;AACE;;AAE5B;AACA,iBAAiB,6CAAO,SAAS,mBAAmB;AACpD,MAAM,6CAAO,QAAQ,oBAAoB,GAAG;AAC5C;AACA;AACA,MAAM,6CAAO,OAAO,qBAAqB,GAAG;AAC5C,MAAM,6CAAO,YAAY,6CAAO,sBAAsB,6CAAO;AAC7D;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,6CAAO,SAAS,aAAa;AACjD,MAAM,6CAAO,QAAQ,oBAAoB,GAAG;AAC5C;AACA;AACA,MAAM,6CAAO,OAAO,qBAAqB,GAAG;AAC5C,MAAM,6CAAO;AACb,QAAQ,6CAAO;AACf,QAAQ,6CAAO;AACf,QAAQ,6CAAO;AACf;AACA;;AAEA;AACA;AACA,gBAAgB,8CAAI;;AAEpB;AACA;AACA;AACA,EAAE,+CAAK;AACP,CAAC","file":"test.js","sourcesContent":["import patch from \"./patch\";\nfunction diff(oldTree, newTree) {\n  const patches = {};\n  const index = {\n    value: 0,\n  };\n  dfsWalk(oldTree, newTree, index, patches);\n  return patches;\n}\n// 比较属性的变化\nfunction diffProps(oldProps, newProps, index, currentIndexPatches) {\n  // 遍历旧的属性,找到被删除和修改的情况\n  for (const propKey in oldProps) {\n    // 新属性中不存在,旧属性存在,属性被删除\n    if (!newProps.hasOwnProperty(propKey)) {\n      currentIndexPatches.push({\n        type: patch.NODE_ATTRIBUTE_DELETE,\n        key: propKey,\n      });\n    } else if (newProps[propKey] !== oldProps[propKey]) {\n      // 新旧属性中都存在,但是值不同: 属性被修改\n      currentIndexPatches.push({\n        type: patch.NODE_ATTRIBUTE_MODIFY,\n        key: propKey,\n        value: newProps[propKey],\n      });\n    }\n  }\n\n  // 遍历新元素,找到添加的部分\n  for (const propKey in newProps) {\n    // 旧属性中不存在,新属性中存在: 添加属性\n    if (!oldProps.hasOwnProperty(propKey)) {\n      currentIndexPatches.push({\n        type: patch.NODE_ATTRIBUTE_ADD,\n        key: propKey,\n        value: newProps[propKey],\n      });\n    }\n  }\n}\n// 顺序比较子元素的变化（未实现数组元素的key比较）\nfunction diffChildren(\n  oldChildren,\n  newChildren,\n  index,\n  currentIndexPatches,\n  patches\n) {\n  if (oldChildren.length < newChildren.length) {\n    // 有元素被添加\n    let i = 0;\n    for (; i < oldChildren.length; i++) {\n      console.log(\"oldChildren,index.value\", index.value);\n      index.value++;\n      dfsWalk(oldChildren[i], newChildren[i], index, patches);\n    }\n    for (; i < newChildren.length; i++) {\n      currentIndexPatches.push({\n        type: patch.NODE_ADD,\n        value: newChildren[i],\n      });\n    }\n  } else {\n    // 对比新旧子元素的变化\n    for (let i = 0; i < oldChildren.length; i++) {\n      console.log(\"newChildren.index.value\", index.value);\n      index.value++;\n      dfsWalk(oldChildren[i], newChildren[i], index, patches);\n    }\n  }\n}\n// 比较innerHTML的变化\nfunction dfsWalk(oldNode, newNode, index, patches) {\n  const currentIndex = index.value;\n  const currentIndexPatches = [];\n  if (newNode === undefined) {\n    // 节点被移除\n    currentIndexPatches.push({\n      type: patch.NODE_DELETE,\n    });\n  } else if (typeof oldNode === \"string\" && typeof newNode === \"string\") {\n    // 文本节点被修改\n    if (oldNode !== newNode) {\n      currentIndexPatches.push({\n        type: patch.NODE_TEXT_MODIFY,\n        value: newNode,\n      });\n    }\n  } else if (\n    oldNode.tagName === newNode.tagName &&\n    oldNode.key === newNode.key\n  ) {\n    // 同时根据tagName和key来进行对比\n    diffProps(oldNode.props, newNode.props, index, currentIndexPatches);\n    diffChildren(\n      oldNode.children,\n      newNode.children,\n      index,\n      currentIndexPatches,\n      patches\n    );\n  } else {\n    currentIndexPatches.push({\n      type: patch.NODE_REPLACE,\n      value: newNode,\n    });\n  }\n  if (currentIndexPatches.length > 0) {\n    console.log(\"currentIndex\", currentIndex);\n    patches[currentIndex] = currentIndexPatches;\n  }\n}\n\nexport default diff;\n","/**\n * 用javascript对象表示DOM结构\n */\nclass Element {\n  constructor(tagName, ...args) {\n    this.tagName = tagName;\n    // 判断有没有props\n    if (Array.isArray(args[0])) {\n      this.props = {};\n      this.children = args[0];\n    } else {\n      this.props = args[0];\n      this.children = args[1];\n    }\n    this.key = this.props.key || void 0;\n  }\n  render() {\n    // 创建一个元素\n    const $dom = document.createElement(this.tagName);\n    // 给元素加上所有的属性\n    for (const proKey in this.props) {\n      $dom.setAttribute(proKey, this.props[proKey]);\n    }\n    // 如果存在子节点\n    if (this.children) {\n      this.children.forEach((child) => {\n        // 如果子元素还包含子元素,则递归\n        if (child instanceof Element) {\n          $dom.appendChild(child.render());\n        } else {\n          $dom.appendChild(document.createTextNode(child));\n        }\n      });\n    }\n    return $dom;\n  }\n}\nexport default Element;\n","function patch($dom, patches) {\n  const index = {\n    value: 0,\n  };\n  dfsWalk($dom, index, patches);\n}\npatch.NODE_DELETE = \"NODE_DELETE\"; // 节点被删除\npatch.NODE_TEXT_MODIFY = \"NODE_TEXT_MODIFY\"; // 文本节点被更改\npatch.NODE_REPLACE = \"NODE_REPLACE\"; // 节点被替代\npatch.NODE_ADD = \"NODE_ADD\"; // 添加节点\npatch.NODE_ATTRIBUTE_MODIFY = \"NODE_ATTRIBUTE_MODIFY\"; // 更新属性\npatch.NODE_ATTRIBUTE_ADD = \"NODE_ATTRIBUTE_ADD\"; // 添加属性\npatch.NODE_ATTRIBUTE_DELETE = \"NODE_ATTRIBUTE_DELETE\"; // 删除属性\n\n// 根据不同类型的差异对当前节点进行 DOM 操作：\nfunction dfsWalk($node, index, patches, isEnd = false) {\n  if (patches[index.value]) {\n    patches[index.value].forEach((p) => {\n      switch (p.type) {\n        case patch.NODE_ATTRIBUTE_MODIFY: {\n          $node.setAttribute(p.key, p.value);\n          break;\n        }\n        case patch.NODE_ATTRIBUTE_DELETE: {\n          $node.removeAttribute(p.key, p.value);\n          break;\n        }\n        case patch.NODE_ATTRIBUTE_ADD: {\n          $node.setAttribute(p.key, p.value);\n          break;\n        }\n        case patch.NODE_ADD: {\n          $node.appendChild(p.value.render());\n          break;\n        }\n        case patch.NODE_TEXT_MODIFY: {\n          $node.textContent = p.value;\n          break;\n        }\n        case patch.NODE_REPLACE: {\n          $node.replaceWith(p.value.render());\n          break;\n        }\n        case patch.NODE_DELETE: {\n          $node.remove();\n          break;\n        }\n        default: {\n          console.log(p);\n        }\n      }\n    });\n  }\n  if (isEnd) {\n    return;\n  }\n  if ($node.children.length > 0) {\n    for (let i = 0; i < $node.children.length; i++) {\n      index.value++;\n      dfsWalk($node.children[i], index, patches);\n    }\n  } else {\n    index.value++;\n    dfsWalk($node, index, patches, true);\n  }\n}\n\nexport default patch;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Element from \"./element\";\nimport diff from \"./diff\";\nimport patch from \"./patch\";\n\n// 1.构建虚拟DOM\nconst tree = new Element(\"div\", { classname: \"div\" }, [\n  new Element(\"h1\", { style: \"color: red;\" }, [\n    \"Hello, This is my Vdom library\",\n  ]),\n  new Element(\"p\", { style: \"color: blue;\" }, [\"extra text\"]),\n  new Element(\"ul\", [new Element(\"li\", [\"1111\"]), new Element(\"li\", [\"2222\"])]),\n]);\n\n// 2.通过虚拟DOM构建真正的DOM\nconst $dom = tree.render();\nconst $app = document.querySelector(\"#app\");\n$app.replaceWith($dom);\n\n// 3.生成新的虚拟DOM\nconst newTree = new Element(\"div\", { id: \"div1\" }, [\n  new Element(\"h1\", { style: \"color: red;\" }, [\n    \"Hello, This is my vdom library111\",\n  ]),\n  new Element(\"p\", { style: \"color: blue;\" }, [\"extra text\"]),\n  new Element(\"ul\", [\n    new Element(\"li\", [\"1111\"]),\n    new Element(\"li\", [\"5555\"]),\n    new Element(\"li\", [\"333\"]),\n  ]),\n]);\n\nconsole.log(tree, newTree);\n// 4.比较新旧虚拟DOM树的差异\nconst patches = diff(tree, newTree);\n\nconsole.log(patches);\n// 5.根据变化了的部分去更新DOM\nsetTimeout(() => {\n  patch($dom, patches);\n}, 3000);\n"],"sourceRoot":""}