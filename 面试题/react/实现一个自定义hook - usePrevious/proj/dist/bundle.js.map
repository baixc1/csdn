{"version":3,"sources":["webpack://proj/./src/components/Hello.tsx","webpack://proj/./src/components/usePrevious.ts","webpack://proj/external \"React\"","webpack://proj/external \"ReactDOM\"","webpack://proj/webpack/bootstrap","webpack://proj/./src/index.tsx"],"names":["useState","React","count","setCount","previous","style","marginBottom","type","onClick","c","marginLeft","state","compare","prevRef","useRef","curRef","console","log","current","module","exports","ReactDOM","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","render","document","getElementById"],"mappings":"yFAAA,aACA,SAEQA,EAAaC,EAAK,SAE1B,qBACQ,MAAoBD,EAAS,GAA5BE,EAAK,KAAEC,EAAQ,KAChBC,EAAW,UAAYF,GAC7B,OACE,gCACE,2B,0BAA6BA,GAC7B,uBAAKG,MAAO,CAAEC,aAAc,I,2BAA8BF,GAC1D,0BAAQG,KAAK,SAASC,QAAS,WAAM,OAAAL,GAAS,SAACM,GAAM,OAAAA,EAAI,OAAE,YAG3D,0BACEF,KAAK,SACLF,MAAO,CAAEK,WAAY,GACrBF,QAAS,WAAM,OAAAL,GAAS,SAACM,GAAM,OAAAA,EAAI,OAAE,e,+DClB7C,aAIA,mBAAmBE,EAAUC,GAC3B,IAAMC,EAAU,EAAAC,SACVC,EAAS,EAAAD,SAUf,OARAE,QAAQC,IAAIL,IAES,mBAAZA,GAAyBA,EAAQG,EAAOG,QAASP,MAExDE,EAAQK,QAAUH,EAAOG,QACzBH,EAAOG,QAAUP,GAGZE,EAAQK,U,QChBjBC,EAAOC,QAAUnB,O,QCAjBkB,EAAOC,QAAUC,WCCbC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,MCrBf,aACA,SAEA,SAEAC,EAASO,OAAO,gBAAC,UAAG,MAAKC,SAASC,eAAe,a","file":"bundle.js","sourcesContent":["import usePrevious from \"./usePrevious\";\nimport * as React from \"react\";\n\nconst { useState } = React;\n\nexport default () => {\n  const [count, setCount] = useState(0);\n  const previous = usePrevious(count);\n  return (\n    <>\n      <div>counter current value: {count}</div>\n      <div style={{ marginBottom: 8 }}>counter previous value: {previous}</div>\n      <button type=\"button\" onClick={() => setCount((c) => c + 1)}>\n        increase\n      </button>\n      <button\n        type=\"button\"\n        style={{ marginLeft: 8 }}\n        onClick={() => setCount((c) => c - 1)}\n      >\n        decrease\n      </button>\n    </>\n  );\n};\n","import { useRef } from \"react\";\n\nexport type compareFunction<T> = (prev: T | undefined, next: T) => boolean;\n\nexport default <T>(state: T, compare?: compareFunction<T>): T | undefined => {\n  const prevRef = useRef<T>();\n  const curRef = useRef<T>();\n\n  console.log(compare);\n  const needUpdate =\n    typeof compare === \"function\" ? compare(curRef.current, state) : true;\n  if (needUpdate) {\n    prevRef.current = curRef.current;\n    curRef.current = state;\n  }\n\n  return prevRef.current;\n};\n","module.exports = React;","module.exports = ReactDOM;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./components/Hello\";\n\nReactDOM.render(<App />, document.getElementById(\"example\"));\n"],"sourceRoot":""}